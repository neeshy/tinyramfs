#!/bin/sh
#
# https://shellcheck.net/wiki/SC2154
# shellcheck disable=2154

set -e
unset IFS

# TODO add version
usage() {
    cat <<EOF >&2
usage: $(basename "$0") [option]... <output>
    -k <kern>  set kernel version
    -m <path>  set path to modules
    -H <hooks> set hooks (comma-separated)
    -c <util>  set compression utility
    -n         don't copy kernel modules (for a non-modular kernel)
    -M         detect modules to copy
    -d         enable debug mode
    -h         display this message
EOF

    exit "$1"
}

print() {
    printf '%s %s\n' "${2:->>}" "$1"
}

die() {
    print "${1:-unexpected error occurred}" '!>' >&2
    exit 1
}

add_config() {
    printf '%s=%s\n' "$1" "$2" >>"$tmpdir/etc/tinyramfs.conf"
}

init_base() {
    print 'creating ramfs structure'

    mkdir -p "${tmpdir:=${TMPDIR:-/tmp}/tinyramfs.$$}"

    if [ -n "$debug" ]; then
        set -x
    else
        trap 'rm -rf "$tmpdir"' EXIT INT
    fi

    for dir in dev sys proc lib bin etc mnt; do
        mkdir -p "$tmpdir/$dir"
    done
    ln -s . "$tmpdir/usr"
    ln -s bin "$tmpdir/sbin"
    ln -s lib "$tmpdir/lib64"

    [ -n "$root" ] && add_config root "$root"
    [ -n "$rootfstype" ] && add_config rootfstype "$rootfstype"
    [ -n "$rootflags" ] && add_config rootflags "$rootflags"
    [ -n "$ro" ] && add_config ro true
    [ -n "$rw" ] && add_config rw true
    [ -n "$init" ] && add_config init "$init"

    copy_exec busybox
    for bin in $("$tmpdir/bin/busybox" --list); do case "$bin" in
        busybox) continue;;
        *) ln -s busybox "$tmpdir/bin/$bin";;
    esac; done

    copy_exec kmod
    for bin in lsmod rmmod insmod modinfo modprobe depmod; do
        ln -sf kmod "$tmpdir/bin/$bin"
    done

    copy_exec fsck
    [ -z "$rootfstype" ] && detect_rootfs
    copy_exec "fsck.$rootfstype"

    copy_file /usr/lib/tinyramfs/init.sh /init 755
}

detect_rootfs() {
    while read -r _ dir type _; do
        if [ "$dir" = / ]; then
            rootfstype="$type"
            return
        fi
    done </proc/mounts
    die 'unable to detect rootfs module'
}

copy_file() {
    file="$1"
    dest="$2"
    mode="${3:-644}"
    strip="$4"

    install -D -m "$mode" "$file" "$tmpdir/$dest"

    if [ -n "$strip" ]; then
        strip "$tmpdir/$dest" >/dev/null 2>&1 || :
    fi
}

copy_exec() {
    bin="$(command -pv "$1")"

    case "$bin" in
        /*) ;;
        '') die "unable to find command: $1";;
        *)
            # https://shellcheck.net/wiki/SC2086
            # shellcheck disable=2086
            { IFS=:; set -- $PATH; unset IFS; }

            for dir; do
                _bin="$dir/$bin"
                if [ -x "$_bin" ]; then
                    bin="$_bin"
                    break
                fi
            done

            [ -x "$bin" ] || die "unable to find command: $bin"
            ;;
    esac

    copy_file "$bin" "/bin/$(basename "$bin")" 755 strip

    ldd "$bin" 2>/dev/null |
        while IFS= read -r lib; do
            lib="/${lib#*/}"
            lib="${lib% *}"

            if [ -e "$lib" ]; then
                copy_file "$lib" "/lib/$(basename "$lib")" 755 strip
            fi
        done
}

copy_kmod() {
    modprobe -S "$kernel" -D "$1" 2>/dev/null |
        while read -r _ mod _; do
            case "$mod" in
              /*) copy_file "$mod" "$mod"
            esac
        done
}

# TODO allow full path to hook
copy_hooks() {
    # https://shellcheck.net/wiki/SC2086
    # shellcheck disable=2086
    add_config hooks "$hooks"
    { IFS=,; set -- $hooks; unset IFS; }

    for hook; do
        path="/usr/lib/tinyramfs/hook/$hook"
        if ! [ -f "$path/install" ] \
                && ! [ -f "$path/init" ] \
                && ! [ -f "$path/init.late" ]; then
            die "unable to find hook: $hook"
        fi

        for ext in init init.late; do
            [ -f "$path/$ext" ] || continue

            print "copying hook: $hook/$ext"

            copy_file "$path/$ext" "/lib/hook/$hook/$ext"
        done

        print "evaluating hook: $hook"

        # https://shellcheck.net/wiki/SC1090
        # shellcheck disable=1090
        if [ -f "$path/install" ]; then
            . "$path/install"
        fi
    done
}

copy_modules() {
    # Skip this function if kernel
    # compiled with builtin modules.
    if [ -n "$monolith" ]; then
        return
    elif [ -n "$hostonly" ]; then
        print 'copying hostonly modules'

        # Perform autodetection of modules via /sys
        # https://wiki.archlinux.org/index.php/Modalias
        find /sys/devices -name modalias -exec sort -u {} + |
            while IFS= read -r mod; do
                # Skip unneeded modules and skip modules which
                # depends on them as well.
                case "$(modprobe -S "$kernel" -D "$mod")" in
                    *wmi*|*gpu*|*net*) continue;;
                esac 2>/dev/null

                copy_kmod "$mod"
            done

        [ -z "$rootfstype" ] && detect_rootfs
        copy_kmod "$rootfstype"
    else
        print 'copying all modules'

        (
            cd "$moddir/$kernel/kernel"

            find \
                fs lib arch crypto drivers/md drivers/ata drivers/scsi \
                drivers/nvme drivers/block drivers/virtio drivers/usb/host \
                drivers/usb/common drivers/usb/core \
                drivers/usb/storage drivers/input/keyboard -type f 2>/dev/null |
                while IFS= read -r mod; do
                    copy_file "$mod" "/lib/modules/$kernel/kernel/$mod"
                done
        )
    fi

    copy_file "$moddir/$kernel/modules.order" \
              "/lib/modules/$kernel/modules.order"

    copy_file "$moddir/$kernel/modules.builtin" \
              "/lib/modules/$kernel/modules.builtin"

    copy_file "${moddir}/${kernel}/modules.builtin.modinfo" \
              "/lib/modules/${kernel}/modules.builtin.modinfo" 0644

    depmod -b "$tmpdir" "$kernel"
}

create_image() {
    print 'generating initramfs image'

    (cd "$tmpdir" && find . | cpio -oH newc -R +0:+0 2>/dev/null) | ${compress:-cat} >"$output" ||
        die 'failed to generate initramfs image'

    print "done: $output" '+>'
}

while getopts k:m:H:c:nMdh opt; do case "$opt" in
    k) kernel="$OPTARG";;
    m) moddir="$OPTARG";;
    H) hooks="$OPTARG";;
    c) compress="$OPTARG";;
    n) monolithic=true;;
    M) hostonly=true;;
    d) debug=true;;
    h) usage 0;;
    ?) usage 2;;
esac; done

shift "$((OPTIND - 1))"

if [ -n "$1" ]; then
    output="$1"
else
    usage 2
fi

: "${kernel:=$(uname -r)}"
: "${moddir:=/lib/modules}"

init_base
copy_hooks
copy_modules
create_image
